pipeline 
{
    agent any
    stages 
    {
        stage('install and configure puppet on slave') 
        {
            agent 
            { 
                    label 'slave'
            }
            steps {
                echo 'Install Puppet'
                sh "wget -N -O 'puppet.deb' https://apt.puppetlabs.com/puppet6-release-bionic.deb"
                sh "chmod 755 puppet.deb"
                sh "sudo dpkg -i puppet.deb"
                sh "sudo apt update"
                sh "sudo apt install -y puppet-agent"
                echo 'configure puppet'
                sh "mkdir -p /etc/puppetlabs/puppet"
                sh "if [ -f /etc/puppetlabs/puppet/puppet.conf ]; then sudo rm -f /etc/puppetlabs/puppet.conf; fi"
                sh "echo '[main]\ncertname = node1.local\nserver = puppet' >> ~/puppet.conf"
                sh "sudo mv ~/puppet.conf /etc/puppetlabs/puppet/puppet.conf"
                echo 'start puppet'
                sh "sudo systemctl start puppet"
                sh "sudo systemctl enable puppet"
            }
        }
        stage('ansible configuration to install docker') 
        {
            steps
            {
                git 'https://github.com/guru0002/projCert'
                sh "git ls-files -o -c --exclude-standard > /tmp/c; git ls-files -d > /tmp/d; grep -vf /tmp/d /tmp/c"
                ansiblePlaybook credentialsId: 'private-key', disableHostKeyChecking: true, installation: 'ansible', inventory: 'dev.inv', playbook: 'installdocker.yml'
            }
        }
        stage('pull PHP website') {
            agent
            { 
                    label 'slave'
            }
            steps 
            {
                sh "if [ ! -d '/var/www/html' ]; then git clone https://github.com/guru0002/projCert /var/www/html ; fi"
                sh "cd /var/www/html && sudo git checkout master"
                sh "sudo docker rm -f webapp || true"
                sh "cd /var/www/html && sudo docker build -t test ."
                sh "sudo docker run -it -d --name webapp -p 8090:80 test"
            }
        }
    }
}
